% Dependencies
%
% cat page-setup.ps vector-procedures.ps drawing-procedures.ps chp1-ex1-10.ps > tmp.ps
% (or use the Makefile: `make ex10`)

% Exercise 1.10. Draw in PostScript the following pictures, taken, with
% modifications, from the proof of Proposition I.47 in the standard
% edition of Euclid’s Elements. Of course you might want to look up
% Euclid’s argument first. One thing to keep in mind is that in drawing
% a complex figure, each conceptual component in the program should be
% handled as a unit. A triangle is not just a bunch of line segments,
% but line segments assembled in a particular order and style. You
% should also think here about about using colors in an intelligent way
% to help explain Euclid’s proof.

% https://mathcs.clarku.edu/~djoyce/elements/bookI/propI47.html

% I'd like to actually do this by using compass and ruler methods in
% PostScript, but for the sake of getting the exercise done in a way
% that follows the book, I'm going to calculate coordinates for now.

% I'm not completely following the book though, because I need to use
% some variables and procedures, otherwise it's just too much of a mess.

% My plan is to first calculate all of the points in the drawing, and
% then use them to draw the various paths I need 9 coordinates total,
% 3 for the triangle and then two more for each square.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% CALCULATE THE POINTS
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Triangle: (-1, 0), (3, 0), (0, sqrt 3)
/sqrt3 {3 sqrt} def
/left [-1 0] def
/right [3 0] def
/top [0 sqrt3] def

% Left square
/leftLength { left top getLength } def  % Left side of triangle
/topvector { right top getUnitVector } def  % Normalized vector of hypotenuse
/leftSquareTop { leftLength topvector top pointFromVector } def % length, vector, start
/leftSquareBottom { leftLength topvector left pointFromVector } def % length, vector, start

% Right Square
/rightLength { top right getLength } def % Length of hypotenuse
/leftVector { left top getUnitVector } def % Unit vector from left side of triangle
/rightSquareTop { rightLength leftVector top pointFromVector } def
/rightSquareBottom { rightLength leftVector right pointFromVector } def

% Bottom Square
/bottomLength { right left getLength} def % Length of bottom of triangle
/verticalVector { [0 0] [0 -1] getUnitVector } def % Vector going straight down
/bottomSquareLeft { bottomLength verticalVector left pointFromVector } def
/bottomSquareRight{ bottomLength verticalVector right pointFromVector } def


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% CREATE THE DRAWING
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

/theTriangle { % Construct triangle out of two 30-60-90 triangles with a height of sqrt 3
    gsave
    drawSmaller
    newpath [right top] left closedPathFromPoints stroke
    grestore
} def

/leftSquare { % Draw the left square
    gsave
    drawSmaller
    newpath [leftSquareTop leftSquareBottom left] top closedPathFromPoints stroke
    grestore
} def

/rightSquare { % Draw the right square
    gsave
    drawSmaller
    newpath [rightSquareTop rightSquareBottom right] top closedPathFromPoints stroke
    grestore
} def

/bottomSquare { % Draw the bottom square
    gsave
    drawSmaller
    newpath [bottomSquareLeft bottomSquareRight right] left closedPathFromPoints stroke
    grestore
} def

/theSquares {
    leftSquare rightSquare bottomSquare
} def

/step1 {
    -1 leftCol
    gsave
    theTriangle
    grestore
    resetX
    rightColText
    gsave
    normalText
    0 0 moveto
    (Let ABC be a right-angled triangle having the angle BAC right) show
    grestore
    resetX

} def


/step2 {
    -1.5 leftCol
    gsave
    theTriangle
    theSquares
    grestore
    resetX
    rightColText
    gsave
    normalText
    0 0 moveto
    (Let ABC be a right-angled triangle having the angle BAC right) show
    grestore
    
    resetX
} def

/step3 {
    -2.2 leftCol
    gsave
    theTriangle
    theSquares
    grestore
    resetX
    rightColText
    gsave
    normalText
    0 0 moveto
    (Let ABC be a right-angled triangle having the angle BAC right) show
    grestore

    resetX
    
} def

% /drawStep {
    
%     cvx
%     exec
% }

% Setup page
eightByElevenCenteredOneInchGrid
startAtTopLeft

% [//step1 //step2 //step3] {
%     gsave cvx exec grestore
% } forall

step1
step2 step3

% gsave
% step1
% grestore

% gsave
% step2
% grestore

% gsave
% step3
% grestore


% newpath
% top 0 get top 1 get moveto
% nextpoint aload pop lineto
% stroke

% % Let ABC be a right-angled triangle having the angle BAC right

% newpath
% -4.25 5.5 translate
% .5 -.5 moveto
% (Let ABC be a right-angled triangle having the angle BAC right) show
